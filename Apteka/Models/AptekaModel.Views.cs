//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Apteka.Models.aptekaEntities1),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetse4ae167d4a7a9bad861ad8d499a6f792eeee5c7a8b774ef2f3b98155d39ddc50))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetse4ae167d4a7a9bad861ad8d499a6f792eeee5c7a8b774ef2f3b98155d39ddc50 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "e4ae167d4a7a9bad861ad8d499a6f792eeee5c7a8b774ef2f3b98155d39ddc50"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "aptekaModelStoreContainer.__MigrationHistory")
            {
                return GetView0();
            }

            if (extentName == "aptekaEntities1.C__MigrationHistory")
            {
                return GetView1();
            }

            if (extentName == "aptekaModelStoreContainer.AspNetRoles")
            {
                return GetView2();
            }

            if (extentName == "aptekaModelStoreContainer.AspNetUserClaims")
            {
                return GetView3();
            }

            if (extentName == "aptekaModelStoreContainer.AspNetUserLogins")
            {
                return GetView4();
            }

            if (extentName == "aptekaModelStoreContainer.AspNetUsers")
            {
                return GetView5();
            }

            if (extentName == "aptekaModelStoreContainer.Faktura")
            {
                return GetView6();
            }

            if (extentName == "aptekaModelStoreContainer.Faktura_operacja")
            {
                return GetView7();
            }

            if (extentName == "aptekaModelStoreContainer.Hurtownia")
            {
                return GetView8();
            }

            if (extentName == "aptekaModelStoreContainer.Lek")
            {
                return GetView9();
            }

            if (extentName == "aptekaModelStoreContainer.Operacja")
            {
                return GetView10();
            }

            if (extentName == "aptekaModelStoreContainer.AspNetUserRoles")
            {
                return GetView11();
            }

            if (extentName == "aptekaEntities1.AspNetRoles")
            {
                return GetView12();
            }

            if (extentName == "aptekaEntities1.AspNetUserClaims")
            {
                return GetView13();
            }

            if (extentName == "aptekaEntities1.AspNetUserLogins")
            {
                return GetView14();
            }

            if (extentName == "aptekaEntities1.AspNetUsers")
            {
                return GetView15();
            }

            if (extentName == "aptekaEntities1.Faktura")
            {
                return GetView16();
            }

            if (extentName == "aptekaEntities1.Faktura_operacja")
            {
                return GetView17();
            }

            if (extentName == "aptekaEntities1.Hurtownia")
            {
                return GetView18();
            }

            if (extentName == "aptekaEntities1.Lek")
            {
                return GetView19();
            }

            if (extentName == "aptekaEntities1.Operacja")
            {
                return GetView20();
            }

            if (extentName == "aptekaEntities1.AspNetUserRoles")
            {
                return GetView21();
            }

            if (extentName == "aptekaModelStoreContainer.sysdiagrams")
            {
                return GetView22();
            }

            if (extentName == "aptekaEntities1.sysdiagrams")
            {
                return GetView23();
            }

            if (extentName == "aptekaModelStoreContainer.Lista_hurtowni")
            {
                return GetView24();
            }

            if (extentName == "aptekaEntities1.Lista_hurtowni")
            {
                return GetView25();
            }

            if (extentName == "aptekaModelStoreContainer.Lista_lekow")
            {
                return GetView26();
            }

            if (extentName == "aptekaEntities1.Lista_lekow")
            {
                return GetView27();
            }

            if (extentName == "aptekaModelStoreContainer.Sprawdz_faktury")
            {
                return GetView28();
            }

            if (extentName == "aptekaEntities1.Sprawdz_faktury")
            {
                return GetView29();
            }

            if (extentName == "aptekaModelStoreContainer.Sprawdz_zawartosc_faktury")
            {
                return GetView30();
            }

            if (extentName == "aptekaEntities1.Sprawdz_zawartosc_faktury")
            {
                return GetView31();
            }

            if (extentName == "aptekaModelStoreContainer.Stan_magazynu")
            {
                return GetView32();
            }

            if (extentName == "aptekaEntities1.Stan_magazynu")
            {
                return GetView33();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.__MigrationHistory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing __MigrationHistory
        [aptekaModel.Store.__MigrationHistory](T1.[__MigrationHistory.MigrationId], T1.[__MigrationHistory.ContextKey], T1.[__MigrationHistory.Model], T1.[__MigrationHistory.ProductVersion])
    FROM (
        SELECT 
            T.MigrationId AS [__MigrationHistory.MigrationId], 
            T.ContextKey AS [__MigrationHistory.ContextKey], 
            T.Model AS [__MigrationHistory.Model], 
            T.ProductVersion AS [__MigrationHistory.ProductVersion], 
            True AS _from0
        FROM aptekaEntities1.C__MigrationHistory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.C__MigrationHistory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing C__MigrationHistory
        [aptekaModel.C__MigrationHistory](T1.[C__MigrationHistory.MigrationId], T1.[C__MigrationHistory.ContextKey], T1.[C__MigrationHistory.Model], T1.[C__MigrationHistory.ProductVersion])
    FROM (
        SELECT 
            T.MigrationId AS [C__MigrationHistory.MigrationId], 
            T.ContextKey AS [C__MigrationHistory.ContextKey], 
            T.Model AS [C__MigrationHistory.Model], 
            T.ProductVersion AS [C__MigrationHistory.ProductVersion], 
            True AS _from0
        FROM aptekaModelStoreContainer.__MigrationHistory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.AspNetRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetRoles
        [aptekaModel.Store.AspNetRoles](T1.AspNetRoles_Id, T1.AspNetRoles_Name)
    FROM (
        SELECT 
            T.Id AS AspNetRoles_Id, 
            T.Name AS AspNetRoles_Name, 
            True AS _from0
        FROM aptekaEntities1.AspNetRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.AspNetUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUserClaims
        [aptekaModel.Store.AspNetUserClaims](T1.AspNetUserClaims_Id, T1.AspNetUserClaims_UserId, T1.AspNetUserClaims_ClaimType, T1.AspNetUserClaims_ClaimValue)
    FROM (
        SELECT 
            T.Id AS AspNetUserClaims_Id, 
            T.UserId AS AspNetUserClaims_UserId, 
            T.ClaimType AS AspNetUserClaims_ClaimType, 
            T.ClaimValue AS AspNetUserClaims_ClaimValue, 
            True AS _from0
        FROM aptekaEntities1.AspNetUserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.AspNetUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUserLogins
        [aptekaModel.Store.AspNetUserLogins](T1.AspNetUserLogins_LoginProvider, T1.AspNetUserLogins_ProviderKey, T1.AspNetUserLogins_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS AspNetUserLogins_LoginProvider, 
            T.ProviderKey AS AspNetUserLogins_ProviderKey, 
            T.UserId AS AspNetUserLogins_UserId, 
            True AS _from0
        FROM aptekaEntities1.AspNetUserLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.AspNetUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUsers
        [aptekaModel.Store.AspNetUsers](T1.AspNetUsers_Id, T1.AspNetUsers_Email, T1.AspNetUsers_EmailConfirmed, T1.AspNetUsers_PasswordHash, T1.AspNetUsers_SecurityStamp, T1.AspNetUsers_PhoneNumber, T1.AspNetUsers_PhoneNumberConfirmed, T1.AspNetUsers_TwoFactorEnabled, T1.AspNetUsers_LockoutEndDateUtc, T1.AspNetUsers_LockoutEnabled, T1.AspNetUsers_AccessFailedCount, T1.AspNetUsers_UserName)
    FROM (
        SELECT 
            T.Id AS AspNetUsers_Id, 
            T.Email AS AspNetUsers_Email, 
            T.EmailConfirmed AS AspNetUsers_EmailConfirmed, 
            T.PasswordHash AS AspNetUsers_PasswordHash, 
            T.SecurityStamp AS AspNetUsers_SecurityStamp, 
            T.PhoneNumber AS AspNetUsers_PhoneNumber, 
            T.PhoneNumberConfirmed AS AspNetUsers_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS AspNetUsers_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS AspNetUsers_LockoutEndDateUtc, 
            T.LockoutEnabled AS AspNetUsers_LockoutEnabled, 
            T.AccessFailedCount AS AspNetUsers_AccessFailedCount, 
            T.UserName AS AspNetUsers_UserName, 
            True AS _from0
        FROM aptekaEntities1.AspNetUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Faktura.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Faktura
        [aptekaModel.Store.Faktura](T1.[Faktura.Id_faktura], T1.[Faktura.Id_hurtownia], T1.Faktura_Numer)
    FROM (
        SELECT 
            T.Id_faktura AS [Faktura.Id_faktura], 
            T.Id_hurtownia AS [Faktura.Id_hurtownia], 
            T.Numer AS Faktura_Numer, 
            True AS _from0
        FROM aptekaEntities1.Faktura AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Faktura_operacja.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Faktura_operacja
        [aptekaModel.Store.Faktura_operacja](T1.[Faktura_operacja.ID_faktura], T1.[Faktura_operacja.ID_operacja], T1.[Faktura_operacja.ID_faktura_operacja])
    FROM (
        SELECT 
            T.ID_faktura AS [Faktura_operacja.ID_faktura], 
            T.ID_operacja AS [Faktura_operacja.ID_operacja], 
            T.ID_faktura_operacja AS [Faktura_operacja.ID_faktura_operacja], 
            True AS _from0
        FROM aptekaEntities1.Faktura_operacja AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Hurtownia.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Hurtownia
        [aptekaModel.Store.Hurtownia](T1.[Hurtownia.ID_hurtownia], T1.Hurtownia_Nazwa, T1.Hurtownia_NIP)
    FROM (
        SELECT 
            T.ID_hurtownia AS [Hurtownia.ID_hurtownia], 
            T.Nazwa AS Hurtownia_Nazwa, 
            T.NIP AS Hurtownia_NIP, 
            True AS _from0
        FROM aptekaEntities1.Hurtownia AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Lek.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Lek
        [aptekaModel.Store.Lek](T1.[Lek.Id_lek], T1.Lek_Nazwa, T1.Lek_Postac, T1.Lek_Opakowanie, T1.Lek_Dawka)
    FROM (
        SELECT 
            T.Id_lek AS [Lek.Id_lek], 
            T.Nazwa AS Lek_Nazwa, 
            T.Postac AS Lek_Postac, 
            T.Opakowanie AS Lek_Opakowanie, 
            T.Dawka AS Lek_Dawka, 
            True AS _from0
        FROM aptekaEntities1.Lek AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Operacja.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Operacja
        [aptekaModel.Store.Operacja](T1.[Operacja.ID_operacja], T1.[Operacja.ID_lek], T1.Operacja_Data, T1.[Operacja.ID_user], T1.Operacja_Przychod, T1.Operacja_Rozchod, T1.Operacja_Netto, T1.Operacja_Brutto)
    FROM (
        SELECT 
            T.ID_operacja AS [Operacja.ID_operacja], 
            T.ID_lek AS [Operacja.ID_lek], 
            T.Data AS Operacja_Data, 
            T.ID_user AS [Operacja.ID_user], 
            T.Przychod AS Operacja_Przychod, 
            T.Rozchod AS Operacja_Rozchod, 
            T.Netto AS Operacja_Netto, 
            T.Brutto AS Operacja_Brutto, 
            True AS _from0
        FROM aptekaEntities1.Operacja AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.AspNetUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUserRoles
        [aptekaModel.Store.AspNetUserRoles](T1.AspNetUserRoles_UserId, T1.AspNetUserRoles_RoleId)
    FROM (
        SELECT 
            Key(T.AspNetUsers).Id AS AspNetUserRoles_UserId, 
            Key(T.AspNetRoles).Id AS AspNetUserRoles_RoleId, 
            True AS _from0
        FROM aptekaEntities1.AspNetUserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.AspNetRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetRoles
        [aptekaModel.AspNetRoles](T1.AspNetRoles_Id, T1.AspNetRoles_Name)
    FROM (
        SELECT 
            T.Id AS AspNetRoles_Id, 
            T.Name AS AspNetRoles_Name, 
            True AS _from0
        FROM aptekaModelStoreContainer.AspNetRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.AspNetUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUserClaims
        [aptekaModel.AspNetUserClaims](T1.AspNetUserClaims_Id, T1.AspNetUserClaims_UserId, T1.AspNetUserClaims_ClaimType, T1.AspNetUserClaims_ClaimValue)
    FROM (
        SELECT 
            T.Id AS AspNetUserClaims_Id, 
            T.UserId AS AspNetUserClaims_UserId, 
            T.ClaimType AS AspNetUserClaims_ClaimType, 
            T.ClaimValue AS AspNetUserClaims_ClaimValue, 
            True AS _from0
        FROM aptekaModelStoreContainer.AspNetUserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.AspNetUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUserLogins
        [aptekaModel.AspNetUserLogins](T1.AspNetUserLogins_LoginProvider, T1.AspNetUserLogins_ProviderKey, T1.AspNetUserLogins_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS AspNetUserLogins_LoginProvider, 
            T.ProviderKey AS AspNetUserLogins_ProviderKey, 
            T.UserId AS AspNetUserLogins_UserId, 
            True AS _from0
        FROM aptekaModelStoreContainer.AspNetUserLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.AspNetUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUsers
        [aptekaModel.AspNetUsers](T1.AspNetUsers_Id, T1.AspNetUsers_Email, T1.AspNetUsers_EmailConfirmed, T1.AspNetUsers_PasswordHash, T1.AspNetUsers_SecurityStamp, T1.AspNetUsers_PhoneNumber, T1.AspNetUsers_PhoneNumberConfirmed, T1.AspNetUsers_TwoFactorEnabled, T1.AspNetUsers_LockoutEndDateUtc, T1.AspNetUsers_LockoutEnabled, T1.AspNetUsers_AccessFailedCount, T1.AspNetUsers_UserName)
    FROM (
        SELECT 
            T.Id AS AspNetUsers_Id, 
            T.Email AS AspNetUsers_Email, 
            T.EmailConfirmed AS AspNetUsers_EmailConfirmed, 
            T.PasswordHash AS AspNetUsers_PasswordHash, 
            T.SecurityStamp AS AspNetUsers_SecurityStamp, 
            T.PhoneNumber AS AspNetUsers_PhoneNumber, 
            T.PhoneNumberConfirmed AS AspNetUsers_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS AspNetUsers_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS AspNetUsers_LockoutEndDateUtc, 
            T.LockoutEnabled AS AspNetUsers_LockoutEnabled, 
            T.AccessFailedCount AS AspNetUsers_AccessFailedCount, 
            T.UserName AS AspNetUsers_UserName, 
            True AS _from0
        FROM aptekaModelStoreContainer.AspNetUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Faktura.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Faktura
        [aptekaModel.Faktura](T1.[Faktura.Id_faktura], T1.[Faktura.Id_hurtownia], T1.Faktura_Numer)
    FROM (
        SELECT 
            T.Id_faktura AS [Faktura.Id_faktura], 
            T.Id_hurtownia AS [Faktura.Id_hurtownia], 
            T.Numer AS Faktura_Numer, 
            True AS _from0
        FROM aptekaModelStoreContainer.Faktura AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Faktura_operacja.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Faktura_operacja
        [aptekaModel.Faktura_operacja](T1.[Faktura_operacja.ID_faktura], T1.[Faktura_operacja.ID_operacja], T1.[Faktura_operacja.ID_faktura_operacja])
    FROM (
        SELECT 
            T.ID_faktura AS [Faktura_operacja.ID_faktura], 
            T.ID_operacja AS [Faktura_operacja.ID_operacja], 
            T.ID_faktura_operacja AS [Faktura_operacja.ID_faktura_operacja], 
            True AS _from0
        FROM aptekaModelStoreContainer.Faktura_operacja AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Hurtownia.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Hurtownia
        [aptekaModel.Hurtownia](T1.[Hurtownia.ID_hurtownia], T1.Hurtownia_Nazwa, T1.Hurtownia_NIP)
    FROM (
        SELECT 
            T.ID_hurtownia AS [Hurtownia.ID_hurtownia], 
            T.Nazwa AS Hurtownia_Nazwa, 
            T.NIP AS Hurtownia_NIP, 
            True AS _from0
        FROM aptekaModelStoreContainer.Hurtownia AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Lek.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Lek
        [aptekaModel.Lek](T1.[Lek.Id_lek], T1.Lek_Nazwa, T1.Lek_Postac, T1.Lek_Opakowanie, T1.Lek_Dawka)
    FROM (
        SELECT 
            T.Id_lek AS [Lek.Id_lek], 
            T.Nazwa AS Lek_Nazwa, 
            T.Postac AS Lek_Postac, 
            T.Opakowanie AS Lek_Opakowanie, 
            T.Dawka AS Lek_Dawka, 
            True AS _from0
        FROM aptekaModelStoreContainer.Lek AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Operacja.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Operacja
        [aptekaModel.Operacja](T1.[Operacja.ID_operacja], T1.[Operacja.ID_lek], T1.Operacja_Data, T1.[Operacja.ID_user], T1.Operacja_Przychod, T1.Operacja_Rozchod, T1.Operacja_Netto, T1.Operacja_Brutto)
    FROM (
        SELECT 
            T.ID_operacja AS [Operacja.ID_operacja], 
            T.ID_lek AS [Operacja.ID_lek], 
            T.Data AS Operacja_Data, 
            T.ID_user AS [Operacja.ID_user], 
            T.Przychod AS Operacja_Przychod, 
            T.Rozchod AS Operacja_Rozchod, 
            T.Netto AS Operacja_Netto, 
            T.Brutto AS Operacja_Brutto, 
            True AS _from0
        FROM aptekaModelStoreContainer.Operacja AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.AspNetUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspNetUserRoles
        [aptekaModel.AspNetUserRoles](T3.AspNetUserRoles_AspNetRoles, T3.AspNetUserRoles_AspNetUsers)
    FROM (
        SELECT -- Constructing AspNetRoles
            CreateRef(aptekaEntities1.AspNetRoles, row(T2.AspNetUserRoles_AspNetRoles_Id), [aptekaModel.AspNetRoles]) AS AspNetUserRoles_AspNetRoles, 
            T2.AspNetUserRoles_AspNetUsers
        FROM (
            SELECT -- Constructing AspNetUsers
                T1.AspNetUserRoles_AspNetRoles_Id, 
                CreateRef(aptekaEntities1.AspNetUsers, row(T1.AspNetUserRoles_AspNetUsers_Id), [aptekaModel.AspNetUsers]) AS AspNetUserRoles_AspNetUsers
            FROM (
                SELECT 
                    T.RoleId AS AspNetUserRoles_AspNetRoles_Id, 
                    T.UserId AS AspNetUserRoles_AspNetUsers_Id, 
                    True AS _from0
                FROM aptekaModelStoreContainer.AspNetUserRoles AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [aptekaModel.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM aptekaEntities1.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [aptekaModel.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM aptekaModelStoreContainer.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Lista_hurtowni.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Lista_hurtowni
        [aptekaModel.Store.Lista_hurtowni](T1.[Lista_hurtowni.ID_hurtownia], T1.[Lista_hurtowni.Nazwa], T1.[Lista_hurtowni.NIP])
    FROM (
        SELECT 
            T.ID_hurtownia AS [Lista_hurtowni.ID_hurtownia], 
            T.Nazwa AS [Lista_hurtowni.Nazwa], 
            T.NIP AS [Lista_hurtowni.NIP], 
            True AS _from0
        FROM aptekaEntities1.Lista_hurtowni AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Lista_hurtowni.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Lista_hurtowni
        [aptekaModel.Lista_hurtowni](T1.[Lista_hurtowni.ID_hurtownia], T1.[Lista_hurtowni.Nazwa], T1.[Lista_hurtowni.NIP])
    FROM (
        SELECT 
            T.ID_hurtownia AS [Lista_hurtowni.ID_hurtownia], 
            T.Nazwa AS [Lista_hurtowni.Nazwa], 
            T.NIP AS [Lista_hurtowni.NIP], 
            True AS _from0
        FROM aptekaModelStoreContainer.Lista_hurtowni AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Lista_lekow.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Lista_lekow
        [aptekaModel.Store.Lista_lekow](T1.[Lista_lekow.Id_lek], T1.[Lista_lekow.Nazwa], T1.[Lista_lekow.Postac], T1.[Lista_lekow.Opakowanie], T1.[Lista_lekow.Dawka])
    FROM (
        SELECT 
            T.Id_lek AS [Lista_lekow.Id_lek], 
            T.Nazwa AS [Lista_lekow.Nazwa], 
            T.Postac AS [Lista_lekow.Postac], 
            T.Opakowanie AS [Lista_lekow.Opakowanie], 
            T.Dawka AS [Lista_lekow.Dawka], 
            True AS _from0
        FROM aptekaEntities1.Lista_lekow AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Lista_lekow.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Lista_lekow
        [aptekaModel.Lista_lekow](T1.[Lista_lekow.Id_lek], T1.[Lista_lekow.Nazwa], T1.[Lista_lekow.Postac], T1.[Lista_lekow.Opakowanie], T1.[Lista_lekow.Dawka])
    FROM (
        SELECT 
            T.Id_lek AS [Lista_lekow.Id_lek], 
            T.Nazwa AS [Lista_lekow.Nazwa], 
            T.Postac AS [Lista_lekow.Postac], 
            T.Opakowanie AS [Lista_lekow.Opakowanie], 
            T.Dawka AS [Lista_lekow.Dawka], 
            True AS _from0
        FROM aptekaModelStoreContainer.Lista_lekow AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Sprawdz_faktury.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sprawdz_faktury
        [aptekaModel.Store.Sprawdz_faktury](T1.[Sprawdz_faktury.Id_faktura], T1.[Sprawdz_faktury.Data], T1.[Sprawdz_faktury.Numer], T1.[Sprawdz_faktury.Nazwa], T1.[Sprawdz_faktury.Netto], T1.[Sprawdz_faktury.Brutto])
    FROM (
        SELECT 
            T.Id_faktura AS [Sprawdz_faktury.Id_faktura], 
            T.Data AS [Sprawdz_faktury.Data], 
            T.Numer AS [Sprawdz_faktury.Numer], 
            T.Nazwa AS [Sprawdz_faktury.Nazwa], 
            T.Netto AS [Sprawdz_faktury.Netto], 
            T.Brutto AS [Sprawdz_faktury.Brutto], 
            True AS _from0
        FROM aptekaEntities1.Sprawdz_faktury AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Sprawdz_faktury.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sprawdz_faktury
        [aptekaModel.Sprawdz_faktury](T1.[Sprawdz_faktury.Id_faktura], T1.[Sprawdz_faktury.Data], T1.[Sprawdz_faktury.Numer], T1.[Sprawdz_faktury.Nazwa], T1.[Sprawdz_faktury.Netto], T1.[Sprawdz_faktury.Brutto])
    FROM (
        SELECT 
            T.Id_faktura AS [Sprawdz_faktury.Id_faktura], 
            T.Data AS [Sprawdz_faktury.Data], 
            T.Numer AS [Sprawdz_faktury.Numer], 
            T.Nazwa AS [Sprawdz_faktury.Nazwa], 
            T.Netto AS [Sprawdz_faktury.Netto], 
            T.Brutto AS [Sprawdz_faktury.Brutto], 
            True AS _from0
        FROM aptekaModelStoreContainer.Sprawdz_faktury AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Sprawdz_zawartosc_faktury.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sprawdz_zawartosc_faktury
        [aptekaModel.Store.Sprawdz_zawartosc_faktury](T1.[Sprawdz_zawartosc_faktury.Id_faktura], T1.[Sprawdz_zawartosc_faktury.Id_lek], T1.[Sprawdz_zawartosc_faktury.Nazwa], T1.[Sprawdz_zawartosc_faktury.Dawka], T1.[Sprawdz_zawartosc_faktury.Opakowanie], T1.[Sprawdz_zawartosc_faktury.Postac], T1.[Sprawdz_zawartosc_faktury.Ilosc_zakupionego_leku])
    FROM (
        SELECT 
            T.Id_faktura AS [Sprawdz_zawartosc_faktury.Id_faktura], 
            T.Id_lek AS [Sprawdz_zawartosc_faktury.Id_lek], 
            T.Nazwa AS [Sprawdz_zawartosc_faktury.Nazwa], 
            T.Dawka AS [Sprawdz_zawartosc_faktury.Dawka], 
            T.Opakowanie AS [Sprawdz_zawartosc_faktury.Opakowanie], 
            T.Postac AS [Sprawdz_zawartosc_faktury.Postac], 
            T.Ilosc_zakupionego_leku AS [Sprawdz_zawartosc_faktury.Ilosc_zakupionego_leku], 
            True AS _from0
        FROM aptekaEntities1.Sprawdz_zawartosc_faktury AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Sprawdz_zawartosc_faktury.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sprawdz_zawartosc_faktury
        [aptekaModel.Sprawdz_zawartosc_faktury](T1.[Sprawdz_zawartosc_faktury.Id_faktura], T1.[Sprawdz_zawartosc_faktury.Id_lek], T1.[Sprawdz_zawartosc_faktury.Nazwa], T1.[Sprawdz_zawartosc_faktury.Dawka], T1.[Sprawdz_zawartosc_faktury.Opakowanie], T1.[Sprawdz_zawartosc_faktury.Postac], T1.[Sprawdz_zawartosc_faktury.Ilosc_zakupionego_leku])
    FROM (
        SELECT 
            T.Id_faktura AS [Sprawdz_zawartosc_faktury.Id_faktura], 
            T.Id_lek AS [Sprawdz_zawartosc_faktury.Id_lek], 
            T.Nazwa AS [Sprawdz_zawartosc_faktury.Nazwa], 
            T.Dawka AS [Sprawdz_zawartosc_faktury.Dawka], 
            T.Opakowanie AS [Sprawdz_zawartosc_faktury.Opakowanie], 
            T.Postac AS [Sprawdz_zawartosc_faktury.Postac], 
            T.Ilosc_zakupionego_leku AS [Sprawdz_zawartosc_faktury.Ilosc_zakupionego_leku], 
            True AS _from0
        FROM aptekaModelStoreContainer.Sprawdz_zawartosc_faktury AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaModelStoreContainer.Stan_magazynu.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Stan_magazynu
        [aptekaModel.Store.Stan_magazynu](T1.[Stan_magazynu.ID_lek], T1.[Stan_magazynu.Nazwa], T1.[Stan_magazynu.Dawka], T1.[Stan_magazynu.Postac], T1.[Stan_magazynu.Opakowanie], T1.[Stan_magazynu.Obecny_Stan_Magazynu])
    FROM (
        SELECT 
            T.ID_lek AS [Stan_magazynu.ID_lek], 
            T.Nazwa AS [Stan_magazynu.Nazwa], 
            T.Dawka AS [Stan_magazynu.Dawka], 
            T.Postac AS [Stan_magazynu.Postac], 
            T.Opakowanie AS [Stan_magazynu.Opakowanie], 
            T.Obecny_Stan_Magazynu AS [Stan_magazynu.Obecny_Stan_Magazynu], 
            True AS _from0
        FROM aptekaEntities1.Stan_magazynu AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for aptekaEntities1.Stan_magazynu.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Stan_magazynu
        [aptekaModel.Stan_magazynu](T1.[Stan_magazynu.ID_lek], T1.[Stan_magazynu.Nazwa], T1.[Stan_magazynu.Dawka], T1.[Stan_magazynu.Postac], T1.[Stan_magazynu.Opakowanie], T1.[Stan_magazynu.Obecny_Stan_Magazynu])
    FROM (
        SELECT 
            T.ID_lek AS [Stan_magazynu.ID_lek], 
            T.Nazwa AS [Stan_magazynu.Nazwa], 
            T.Dawka AS [Stan_magazynu.Dawka], 
            T.Postac AS [Stan_magazynu.Postac], 
            T.Opakowanie AS [Stan_magazynu.Opakowanie], 
            T.Obecny_Stan_Magazynu AS [Stan_magazynu.Obecny_Stan_Magazynu], 
            True AS _from0
        FROM aptekaModelStoreContainer.Stan_magazynu AS T
    ) AS T1");
        }
    }
}
